/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.18).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api.pheno;

import io.swagger.model.pheno.ScaleBaseClass;
import io.swagger.model.pheno.ScaleListResponse;
import io.swagger.model.pheno.ScaleSingleResponse;
import io.swagger.annotations.*;

import org.brapi.test.BrAPITestServer.exceptions.BrAPIServerException;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import jakarta.validation.Valid;
import java.util.List;

@javax.annotation.processing.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2020-03-20T16:32:22.556Z[GMT]")
@Api(value = "scales", description = "the scales API")
public interface ScalesApi {

	@ApiOperation(value = "Get the Scales", nickname = "scalesGet", notes = "Returns a list of Scales available on a server.  An Observation Variable has 3 critical parts; A Trait being observed, a Method for making the observation, and a Scale on which the observation can be measured and compared with other observations.", response = ScaleListResponse.class, authorizations = {
			@Authorization(value = "AuthorizationToken") }, tags = { "Scales", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "OK", response = ScaleListResponse.class),
			@ApiResponse(code = 400, message = "Bad Request", response = String.class),
			@ApiResponse(code = 401, message = "Unauthorized", response = String.class),
			@ApiResponse(code = 403, message = "Forbidden", response = String.class) })
	@RequestMapping(value = "/scales", produces = { "application/json" }, method = RequestMethod.GET)
	ResponseEntity<ScaleListResponse> scalesGet(
			@ApiParam(value = "scaleDbId") @Valid @RequestParam(value = "scaleDbId", required = false) String scaleDbId,
			@ApiParam(value = "observationVariableDbId") @Valid @RequestParam(value = "observationVariableDbId", required = false) String observationVariableDbId,
			@ApiParam(value = "ontologyDbId") @Valid @RequestParam(value = "ontologyDbId", required = false) String ontologyDbId,
			@ApiParam(value = "commonCropName") @Valid @RequestParam(value = "commonCropName", required = false) String commonCropName,
			@ApiParam(value = "programDbId") @Valid @RequestParam(value = "programDbId", required = false) String programDbId,
			@ApiParam(value = "externalReferenceID") @Valid @RequestParam(value = "externalReferenceID", required = false) String externalReferenceID,
			@ApiParam(value = "externalReferenceId") @Valid @RequestParam(value = "externalReferenceId", required = false) String externalReferenceId,
			@ApiParam(value = "externalReferenceSource") @Valid @RequestParam(value = "externalReferenceSource", required = false) String externalReferenceSource,
			@ApiParam(value = "page") @Valid @RequestParam(value = "page", required = false) Integer page,
			@ApiParam(value = "pageSize") @Valid @RequestParam(value = "pageSize", required = false) Integer pageSize,
			@ApiParam(value = "HTTP HEADER - Token used for Authorization   <strong> Bearer {token_string} </strong>") @RequestHeader(value = "Authorization", required = false) String authorization)
			throws BrAPIServerException;

	@ApiOperation(value = "Add a new Scale", nickname = "scalesPost", notes = "Create a new scale object in the database", response = ScaleListResponse.class, authorizations = {
			@Authorization(value = "AuthorizationToken") }, tags = { "Scales", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "OK", response = ScaleListResponse.class),
			@ApiResponse(code = 400, message = "Bad Request", response = String.class),
			@ApiResponse(code = 401, message = "Unauthorized", response = String.class),
			@ApiResponse(code = 403, message = "Forbidden", response = String.class) })
	@RequestMapping(value = "/scales", produces = { "application/json" }, consumes = {
			"application/json" }, method = RequestMethod.POST)
	ResponseEntity<ScaleListResponse> scalesPost(@ApiParam(value = "") @Valid @RequestBody List<ScaleBaseClass> body,
			@ApiParam(value = "HTTP HEADER - Token used for Authorization   <strong> Bearer {token_string} </strong>") @RequestHeader(value = "Authorization", required = false) String authorization)
			throws BrAPIServerException;

	@ApiOperation(value = "Get the details of a specific Scale", nickname = "scalesScaleDbIdGet", notes = "Retrieve details about a specific scale  An Observation Variable has 3 critical parts: A Trait being observed, a Method for making the observation, and a Scale on which the observation can be measured and compared with other observations.", response = ScaleSingleResponse.class, authorizations = {
			@Authorization(value = "AuthorizationToken") }, tags = { "Scales", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "OK", response = ScaleSingleResponse.class),
			@ApiResponse(code = 400, message = "Bad Request", response = String.class),
			@ApiResponse(code = 401, message = "Unauthorized", response = String.class),
			@ApiResponse(code = 403, message = "Forbidden", response = String.class),
			@ApiResponse(code = 404, message = "Not Found", response = String.class) })
	@RequestMapping(value = "/scales/{scaleDbId}", produces = { "application/json" }, method = RequestMethod.GET)
	ResponseEntity<ScaleSingleResponse> scalesScaleDbIdGet(
			@ApiParam(value = "Id of the scale to retrieve details of.", required = true) @PathVariable("scaleDbId") String scaleDbId,
			@ApiParam(value = "HTTP HEADER - Token used for Authorization   <strong> Bearer {token_string} </strong>") @RequestHeader(value = "Authorization", required = false) String authorization)
			throws BrAPIServerException;

	@ApiOperation(value = "Update an existing Scale", nickname = "scalesScaleDbIdPut", notes = "Update the details of an existing scale", response = ScaleSingleResponse.class, authorizations = {
			@Authorization(value = "AuthorizationToken") }, tags = { "Scales", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "OK", response = ScaleSingleResponse.class),
			@ApiResponse(code = 400, message = "Bad Request", response = String.class),
			@ApiResponse(code = 401, message = "Unauthorized", response = String.class),
			@ApiResponse(code = 403, message = "Forbidden", response = String.class),
			@ApiResponse(code = 404, message = "Not Found", response = String.class) })
	@RequestMapping(value = "/scales/{scaleDbId}", produces = { "application/json" }, consumes = {
			"application/json" }, method = RequestMethod.PUT)
	ResponseEntity<ScaleSingleResponse> scalesScaleDbIdPut(
			@ApiParam(value = "Id of the scale to retrieve details of.", required = true) @PathVariable("scaleDbId") String scaleDbId,
			@ApiParam(value = "") @Valid @RequestBody ScaleBaseClass body,
			@ApiParam(value = "HTTP HEADER - Token used for Authorization   <strong> Bearer {token_string} </strong>") @RequestHeader(value = "Authorization", required = false) String authorization)
			throws BrAPIServerException;

}
